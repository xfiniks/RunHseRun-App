//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: user_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Run_Hse_Run_UserServiceClient`, then call methods of this protocol to make API calls.
internal protocol Run_Hse_Run_UserServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? { get }

  func getUserByID(
    _ request: Run_Hse_Run_GetUserByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_GetUserByIDRequest, Run_Hse_Run_User>

  func getMe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_User>

  func getUserByNickname(
    _ request: Run_Hse_Run_GetUserByNicknameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_GetUserByNicknameRequest, Run_Hse_Run_Users>

  func changeNickname(
    _ request: Run_Hse_Run_ChangeNicknameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_ChangeNicknameRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func changeImage(
    _ request: Run_Hse_Run_ChangeImageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_ChangeImageRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getLeaderBoard(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_Users>
}

extension Run_Hse_Run_UserServiceClientProtocol {
  internal var serviceName: String {
    return "run.hse.run.UserService"
  }

  /// Unary call to GetUserByID
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserByID(
    _ request: Run_Hse_Run_GetUserByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_GetUserByIDRequest, Run_Hse_Run_User> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByIDInterceptors() ?? []
    )
  }

  /// Unary call to GetMe
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_User> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  /// Unary call to GetUserByNickname
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUserByNickname.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getUserByNickname(
    _ request: Run_Hse_Run_GetUserByNicknameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_GetUserByNicknameRequest, Run_Hse_Run_Users> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByNickname.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByNicknameInterceptors() ?? []
    )
  }

  /// Unary call to ChangeNickname
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeNickname.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changeNickname(
    _ request: Run_Hse_Run_ChangeNicknameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_ChangeNicknameRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.changeNickname.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeNicknameInterceptors() ?? []
    )
  }

  /// Unary call to ChangeImage
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeImage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changeImage(
    _ request: Run_Hse_Run_ChangeImageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_ChangeImageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.changeImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeImageInterceptors() ?? []
    )
  }

  /// Unary call to GetLeaderBoard
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLeaderBoard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLeaderBoard(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_Users> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getLeaderBoard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLeaderBoardInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Run_Hse_Run_UserServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Run_Hse_Run_UserServiceNIOClient")
internal final class Run_Hse_Run_UserServiceClient: Run_Hse_Run_UserServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the run.hse.run.UserService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Run_Hse_Run_UserServiceNIOClient: Run_Hse_Run_UserServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the run.hse.run.UserService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Run_Hse_Run_UserServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? { get }

  func makeGetUserByIDCall(
    _ request: Run_Hse_Run_GetUserByIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_GetUserByIDRequest, Run_Hse_Run_User>

  func makeGetMeCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_User>

  func makeGetUserByNicknameCall(
    _ request: Run_Hse_Run_GetUserByNicknameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_GetUserByNicknameRequest, Run_Hse_Run_Users>

  func makeChangeNicknameCall(
    _ request: Run_Hse_Run_ChangeNicknameRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_ChangeNicknameRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeChangeImageCall(
    _ request: Run_Hse_Run_ChangeImageRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_ChangeImageRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetLeaderBoardCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_Users>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Run_Hse_Run_UserServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Run_Hse_Run_UserServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetUserByIDCall(
    _ request: Run_Hse_Run_GetUserByIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_GetUserByIDRequest, Run_Hse_Run_User> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByIDInterceptors() ?? []
    )
  }

  internal func makeGetMeCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_User> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  internal func makeGetUserByNicknameCall(
    _ request: Run_Hse_Run_GetUserByNicknameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_GetUserByNicknameRequest, Run_Hse_Run_Users> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByNickname.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByNicknameInterceptors() ?? []
    )
  }

  internal func makeChangeNicknameCall(
    _ request: Run_Hse_Run_ChangeNicknameRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_ChangeNicknameRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.changeNickname.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeNicknameInterceptors() ?? []
    )
  }

  internal func makeChangeImageCall(
    _ request: Run_Hse_Run_ChangeImageRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_ChangeImageRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.changeImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeImageInterceptors() ?? []
    )
  }

  internal func makeGetLeaderBoardCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_Users> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getLeaderBoard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLeaderBoardInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Run_Hse_Run_UserServiceAsyncClientProtocol {
  internal func getUserByID(
    _ request: Run_Hse_Run_GetUserByIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Run_Hse_Run_User {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByIDInterceptors() ?? []
    )
  }

  internal func getMe(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Run_Hse_Run_User {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  internal func getUserByNickname(
    _ request: Run_Hse_Run_GetUserByNicknameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Run_Hse_Run_Users {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByNickname.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserByNicknameInterceptors() ?? []
    )
  }

  internal func changeNickname(
    _ request: Run_Hse_Run_ChangeNicknameRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.changeNickname.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeNicknameInterceptors() ?? []
    )
  }

  internal func changeImage(
    _ request: Run_Hse_Run_ChangeImageRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.changeImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeImageInterceptors() ?? []
    )
  }

  internal func getLeaderBoard(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Run_Hse_Run_Users {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_UserServiceClientMetadata.Methods.getLeaderBoard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLeaderBoardInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Run_Hse_Run_UserServiceAsyncClient: Run_Hse_Run_UserServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Run_Hse_Run_UserServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getUserByID'.
  func makeGetUserByIDInterceptors() -> [ClientInterceptor<Run_Hse_Run_GetUserByIDRequest, Run_Hse_Run_User>]

  /// - Returns: Interceptors to use when invoking 'getMe'.
  func makeGetMeInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_User>]

  /// - Returns: Interceptors to use when invoking 'getUserByNickname'.
  func makeGetUserByNicknameInterceptors() -> [ClientInterceptor<Run_Hse_Run_GetUserByNicknameRequest, Run_Hse_Run_Users>]

  /// - Returns: Interceptors to use when invoking 'changeNickname'.
  func makeChangeNicknameInterceptors() -> [ClientInterceptor<Run_Hse_Run_ChangeNicknameRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'changeImage'.
  func makeChangeImageInterceptors() -> [ClientInterceptor<Run_Hse_Run_ChangeImageRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getLeaderBoard'.
  func makeGetLeaderBoardInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_Users>]
}

internal enum Run_Hse_Run_UserServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserService",
    fullName: "run.hse.run.UserService",
    methods: [
      Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByID,
      Run_Hse_Run_UserServiceClientMetadata.Methods.getMe,
      Run_Hse_Run_UserServiceClientMetadata.Methods.getUserByNickname,
      Run_Hse_Run_UserServiceClientMetadata.Methods.changeNickname,
      Run_Hse_Run_UserServiceClientMetadata.Methods.changeImage,
      Run_Hse_Run_UserServiceClientMetadata.Methods.getLeaderBoard,
    ]
  )

  internal enum Methods {
    internal static let getUserByID = GRPCMethodDescriptor(
      name: "GetUserByID",
      path: "/run.hse.run.UserService/GetUserByID",
      type: GRPCCallType.unary
    )

    internal static let getMe = GRPCMethodDescriptor(
      name: "GetMe",
      path: "/run.hse.run.UserService/GetMe",
      type: GRPCCallType.unary
    )

    internal static let getUserByNickname = GRPCMethodDescriptor(
      name: "GetUserByNickname",
      path: "/run.hse.run.UserService/GetUserByNickname",
      type: GRPCCallType.unary
    )

    internal static let changeNickname = GRPCMethodDescriptor(
      name: "ChangeNickname",
      path: "/run.hse.run.UserService/ChangeNickname",
      type: GRPCCallType.unary
    )

    internal static let changeImage = GRPCMethodDescriptor(
      name: "ChangeImage",
      path: "/run.hse.run.UserService/ChangeImage",
      type: GRPCCallType.unary
    )

    internal static let getLeaderBoard = GRPCMethodDescriptor(
      name: "GetLeaderBoard",
      path: "/run.hse.run.UserService/GetLeaderBoard",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Run_Hse_Run_UserServiceProvider: CallHandlerProvider {
  var interceptors: Run_Hse_Run_UserServiceServerInterceptorFactoryProtocol? { get }

  func getUserByID(request: Run_Hse_Run_GetUserByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Run_Hse_Run_User>

  func getMe(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Run_Hse_Run_User>

  func getUserByNickname(request: Run_Hse_Run_GetUserByNicknameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Run_Hse_Run_Users>

  func changeNickname(request: Run_Hse_Run_ChangeNicknameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func changeImage(request: Run_Hse_Run_ChangeImageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func getLeaderBoard(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Run_Hse_Run_Users>
}

extension Run_Hse_Run_UserServiceProvider {
  internal var serviceName: Substring {
    return Run_Hse_Run_UserServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserByID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_GetUserByIDRequest>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_User>(),
        interceptors: self.interceptors?.makeGetUserByIDInterceptors() ?? [],
        userFunction: self.getUserByID(request:context:)
      )

    case "GetMe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_User>(),
        interceptors: self.interceptors?.makeGetMeInterceptors() ?? [],
        userFunction: self.getMe(request:context:)
      )

    case "GetUserByNickname":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_GetUserByNicknameRequest>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_Users>(),
        interceptors: self.interceptors?.makeGetUserByNicknameInterceptors() ?? [],
        userFunction: self.getUserByNickname(request:context:)
      )

    case "ChangeNickname":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_ChangeNicknameRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeChangeNicknameInterceptors() ?? [],
        userFunction: self.changeNickname(request:context:)
      )

    case "ChangeImage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_ChangeImageRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeChangeImageInterceptors() ?? [],
        userFunction: self.changeImage(request:context:)
      )

    case "GetLeaderBoard":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_Users>(),
        interceptors: self.interceptors?.makeGetLeaderBoardInterceptors() ?? [],
        userFunction: self.getLeaderBoard(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Run_Hse_Run_UserServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Run_Hse_Run_UserServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func getUserByID(
    request: Run_Hse_Run_GetUserByIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Run_Hse_Run_User

  @Sendable func getMe(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Run_Hse_Run_User

  @Sendable func getUserByNickname(
    request: Run_Hse_Run_GetUserByNicknameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Run_Hse_Run_Users

  @Sendable func changeNickname(
    request: Run_Hse_Run_ChangeNicknameRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func changeImage(
    request: Run_Hse_Run_ChangeImageRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func getLeaderBoard(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Run_Hse_Run_Users
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Run_Hse_Run_UserServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Run_Hse_Run_UserServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Run_Hse_Run_UserServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Run_Hse_Run_UserServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetUserByID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_GetUserByIDRequest>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_User>(),
        interceptors: self.interceptors?.makeGetUserByIDInterceptors() ?? [],
        wrapping: self.getUserByID(request:context:)
      )

    case "GetMe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_User>(),
        interceptors: self.interceptors?.makeGetMeInterceptors() ?? [],
        wrapping: self.getMe(request:context:)
      )

    case "GetUserByNickname":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_GetUserByNicknameRequest>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_Users>(),
        interceptors: self.interceptors?.makeGetUserByNicknameInterceptors() ?? [],
        wrapping: self.getUserByNickname(request:context:)
      )

    case "ChangeNickname":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_ChangeNicknameRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeChangeNicknameInterceptors() ?? [],
        wrapping: self.changeNickname(request:context:)
      )

    case "ChangeImage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_ChangeImageRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeChangeImageInterceptors() ?? [],
        wrapping: self.changeImage(request:context:)
      )

    case "GetLeaderBoard":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_Users>(),
        interceptors: self.interceptors?.makeGetLeaderBoardInterceptors() ?? [],
        wrapping: self.getLeaderBoard(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Run_Hse_Run_UserServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getUserByID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserByIDInterceptors() -> [ServerInterceptor<Run_Hse_Run_GetUserByIDRequest, Run_Hse_Run_User>]

  /// - Returns: Interceptors to use when handling 'getMe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMeInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_User>]

  /// - Returns: Interceptors to use when handling 'getUserByNickname'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetUserByNicknameInterceptors() -> [ServerInterceptor<Run_Hse_Run_GetUserByNicknameRequest, Run_Hse_Run_Users>]

  /// - Returns: Interceptors to use when handling 'changeNickname'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChangeNicknameInterceptors() -> [ServerInterceptor<Run_Hse_Run_ChangeNicknameRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'changeImage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChangeImageInterceptors() -> [ServerInterceptor<Run_Hse_Run_ChangeImageRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getLeaderBoard'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLeaderBoardInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Run_Hse_Run_Users>]
}

internal enum Run_Hse_Run_UserServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserService",
    fullName: "run.hse.run.UserService",
    methods: [
      Run_Hse_Run_UserServiceServerMetadata.Methods.getUserByID,
      Run_Hse_Run_UserServiceServerMetadata.Methods.getMe,
      Run_Hse_Run_UserServiceServerMetadata.Methods.getUserByNickname,
      Run_Hse_Run_UserServiceServerMetadata.Methods.changeNickname,
      Run_Hse_Run_UserServiceServerMetadata.Methods.changeImage,
      Run_Hse_Run_UserServiceServerMetadata.Methods.getLeaderBoard,
    ]
  )

  internal enum Methods {
    internal static let getUserByID = GRPCMethodDescriptor(
      name: "GetUserByID",
      path: "/run.hse.run.UserService/GetUserByID",
      type: GRPCCallType.unary
    )

    internal static let getMe = GRPCMethodDescriptor(
      name: "GetMe",
      path: "/run.hse.run.UserService/GetMe",
      type: GRPCCallType.unary
    )

    internal static let getUserByNickname = GRPCMethodDescriptor(
      name: "GetUserByNickname",
      path: "/run.hse.run.UserService/GetUserByNickname",
      type: GRPCCallType.unary
    )

    internal static let changeNickname = GRPCMethodDescriptor(
      name: "ChangeNickname",
      path: "/run.hse.run.UserService/ChangeNickname",
      type: GRPCCallType.unary
    )

    internal static let changeImage = GRPCMethodDescriptor(
      name: "ChangeImage",
      path: "/run.hse.run.UserService/ChangeImage",
      type: GRPCCallType.unary
    )

    internal static let getLeaderBoard = GRPCMethodDescriptor(
      name: "GetLeaderBoard",
      path: "/run.hse.run.UserService/GetLeaderBoard",
      type: GRPCCallType.unary
    )
  }
}
