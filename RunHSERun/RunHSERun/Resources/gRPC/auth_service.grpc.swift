//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: auth_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Run_Hse_Run_AuthServiceClient`, then call methods of this protocol to make API calls.
internal protocol Run_Hse_Run_AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? { get }

  func registration(
    _ request: Run_Hse_Run_User,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_User, Run_Hse_Run_UserWithToken>

  func sendVerifyEmail(
    _ request: Run_Hse_Run_SendVerifyEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_SendVerifyEmailRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func verify(
    _ request: Run_Hse_Run_VerifyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Run_Hse_Run_VerifyRequest, Run_Hse_Run_VerifyResponse>
}

extension Run_Hse_Run_AuthServiceClientProtocol {
  internal var serviceName: String {
    return "run.hse.run.AuthService"
  }

  /// Unary call to Registration
  ///
  /// - Parameters:
  ///   - request: Request to send to Registration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registration(
    _ request: Run_Hse_Run_User,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_User, Run_Hse_Run_UserWithToken> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.registration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegistrationInterceptors() ?? []
    )
  }

  /// Unary call to SendVerifyEmail
  ///
  /// - Parameters:
  ///   - request: Request to send to SendVerifyEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendVerifyEmail(
    _ request: Run_Hse_Run_SendVerifyEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_SendVerifyEmailRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.sendVerifyEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendVerifyEmailInterceptors() ?? []
    )
  }

  /// Unary call to Verify
  ///
  /// - Parameters:
  ///   - request: Request to send to Verify.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verify(
    _ request: Run_Hse_Run_VerifyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Run_Hse_Run_VerifyRequest, Run_Hse_Run_VerifyResponse> {
    return self.makeUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.verify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Run_Hse_Run_AuthServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Run_Hse_Run_AuthServiceNIOClient")
internal final class Run_Hse_Run_AuthServiceClient: Run_Hse_Run_AuthServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the run.hse.run.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Run_Hse_Run_AuthServiceNIOClient: Run_Hse_Run_AuthServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the run.hse.run.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Run_Hse_Run_AuthServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? { get }

  func makeRegistrationCall(
    _ request: Run_Hse_Run_User,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_User, Run_Hse_Run_UserWithToken>

  func makeSendVerifyEmailCall(
    _ request: Run_Hse_Run_SendVerifyEmailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_SendVerifyEmailRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeVerifyCall(
    _ request: Run_Hse_Run_VerifyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_VerifyRequest, Run_Hse_Run_VerifyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Run_Hse_Run_AuthServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Run_Hse_Run_AuthServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegistrationCall(
    _ request: Run_Hse_Run_User,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_User, Run_Hse_Run_UserWithToken> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.registration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegistrationInterceptors() ?? []
    )
  }

  internal func makeSendVerifyEmailCall(
    _ request: Run_Hse_Run_SendVerifyEmailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_SendVerifyEmailRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.sendVerifyEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendVerifyEmailInterceptors() ?? []
    )
  }

  internal func makeVerifyCall(
    _ request: Run_Hse_Run_VerifyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Run_Hse_Run_VerifyRequest, Run_Hse_Run_VerifyResponse> {
    return self.makeAsyncUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.verify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Run_Hse_Run_AuthServiceAsyncClientProtocol {
  internal func registration(
    _ request: Run_Hse_Run_User,
    callOptions: CallOptions? = nil
  ) async throws -> Run_Hse_Run_UserWithToken {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.registration.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegistrationInterceptors() ?? []
    )
  }

  internal func sendVerifyEmail(
    _ request: Run_Hse_Run_SendVerifyEmailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.sendVerifyEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendVerifyEmailInterceptors() ?? []
    )
  }

  internal func verify(
    _ request: Run_Hse_Run_VerifyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Run_Hse_Run_VerifyResponse {
    return try await self.performAsyncUnaryCall(
      path: Run_Hse_Run_AuthServiceClientMetadata.Methods.verify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Run_Hse_Run_AuthServiceAsyncClient: Run_Hse_Run_AuthServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Run_Hse_Run_AuthServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'registration'.
  func makeRegistrationInterceptors() -> [ClientInterceptor<Run_Hse_Run_User, Run_Hse_Run_UserWithToken>]

  /// - Returns: Interceptors to use when invoking 'sendVerifyEmail'.
  func makeSendVerifyEmailInterceptors() -> [ClientInterceptor<Run_Hse_Run_SendVerifyEmailRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'verify'.
  func makeVerifyInterceptors() -> [ClientInterceptor<Run_Hse_Run_VerifyRequest, Run_Hse_Run_VerifyResponse>]
}

internal enum Run_Hse_Run_AuthServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "run.hse.run.AuthService",
    methods: [
      Run_Hse_Run_AuthServiceClientMetadata.Methods.registration,
      Run_Hse_Run_AuthServiceClientMetadata.Methods.sendVerifyEmail,
      Run_Hse_Run_AuthServiceClientMetadata.Methods.verify,
    ]
  )

  internal enum Methods {
    internal static let registration = GRPCMethodDescriptor(
      name: "Registration",
      path: "/run.hse.run.AuthService/Registration",
      type: GRPCCallType.unary
    )

    internal static let sendVerifyEmail = GRPCMethodDescriptor(
      name: "SendVerifyEmail",
      path: "/run.hse.run.AuthService/SendVerifyEmail",
      type: GRPCCallType.unary
    )

    internal static let verify = GRPCMethodDescriptor(
      name: "Verify",
      path: "/run.hse.run.AuthService/Verify",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Run_Hse_Run_AuthServiceProvider: CallHandlerProvider {
  var interceptors: Run_Hse_Run_AuthServiceServerInterceptorFactoryProtocol? { get }

  func registration(request: Run_Hse_Run_User, context: StatusOnlyCallContext) -> EventLoopFuture<Run_Hse_Run_UserWithToken>

  func sendVerifyEmail(request: Run_Hse_Run_SendVerifyEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func verify(request: Run_Hse_Run_VerifyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Run_Hse_Run_VerifyResponse>
}

extension Run_Hse_Run_AuthServiceProvider {
  internal var serviceName: Substring {
    return Run_Hse_Run_AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Registration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_User>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_UserWithToken>(),
        interceptors: self.interceptors?.makeRegistrationInterceptors() ?? [],
        userFunction: self.registration(request:context:)
      )

    case "SendVerifyEmail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_SendVerifyEmailRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSendVerifyEmailInterceptors() ?? [],
        userFunction: self.sendVerifyEmail(request:context:)
      )

    case "Verify":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_VerifyRequest>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_VerifyResponse>(),
        interceptors: self.interceptors?.makeVerifyInterceptors() ?? [],
        userFunction: self.verify(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Run_Hse_Run_AuthServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Run_Hse_Run_AuthServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func registration(
    request: Run_Hse_Run_User,
    context: GRPCAsyncServerCallContext
  ) async throws -> Run_Hse_Run_UserWithToken

  @Sendable func sendVerifyEmail(
    request: Run_Hse_Run_SendVerifyEmailRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func verify(
    request: Run_Hse_Run_VerifyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Run_Hse_Run_VerifyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Run_Hse_Run_AuthServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Run_Hse_Run_AuthServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Run_Hse_Run_AuthServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Run_Hse_Run_AuthServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Registration":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_User>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_UserWithToken>(),
        interceptors: self.interceptors?.makeRegistrationInterceptors() ?? [],
        wrapping: self.registration(request:context:)
      )

    case "SendVerifyEmail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_SendVerifyEmailRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSendVerifyEmailInterceptors() ?? [],
        wrapping: self.sendVerifyEmail(request:context:)
      )

    case "Verify":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Run_Hse_Run_VerifyRequest>(),
        responseSerializer: ProtobufSerializer<Run_Hse_Run_VerifyResponse>(),
        interceptors: self.interceptors?.makeVerifyInterceptors() ?? [],
        wrapping: self.verify(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Run_Hse_Run_AuthServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegistrationInterceptors() -> [ServerInterceptor<Run_Hse_Run_User, Run_Hse_Run_UserWithToken>]

  /// - Returns: Interceptors to use when handling 'sendVerifyEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendVerifyEmailInterceptors() -> [ServerInterceptor<Run_Hse_Run_SendVerifyEmailRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'verify'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVerifyInterceptors() -> [ServerInterceptor<Run_Hse_Run_VerifyRequest, Run_Hse_Run_VerifyResponse>]
}

internal enum Run_Hse_Run_AuthServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthService",
    fullName: "run.hse.run.AuthService",
    methods: [
      Run_Hse_Run_AuthServiceServerMetadata.Methods.registration,
      Run_Hse_Run_AuthServiceServerMetadata.Methods.sendVerifyEmail,
      Run_Hse_Run_AuthServiceServerMetadata.Methods.verify,
    ]
  )

  internal enum Methods {
    internal static let registration = GRPCMethodDescriptor(
      name: "Registration",
      path: "/run.hse.run.AuthService/Registration",
      type: GRPCCallType.unary
    )

    internal static let sendVerifyEmail = GRPCMethodDescriptor(
      name: "SendVerifyEmail",
      path: "/run.hse.run.AuthService/SendVerifyEmail",
      type: GRPCCallType.unary
    )

    internal static let verify = GRPCMethodDescriptor(
      name: "Verify",
      path: "/run.hse.run.AuthService/Verify",
      type: GRPCCallType.unary
    )
  }
}
